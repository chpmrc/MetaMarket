<?php
require_once("http.conf");
/*%%%%%%%%%%% LIBRERIA DI FUNZIONI PER IL DESCRITTORE APRIRA %%%%%%%%%%%%%%%*/
/*%%%%%% CREATORE MICHEL GOITOM TUCCU %%%%%%%%*/

                            /*============== FUNZIONI DI ESPLOSIONE PER PUNTEGGIATURA =============*/

function dot_expl ($string) { $new_string = explode ('.', $string); return $new_string; } //funzione esplodi a punto

function dash_expl ($string) { $new_string = explode ('-', $string); return $new_string; } //funzione esplodi a trattino

function colon_expl ($string) { $new_string = explode (':', $string); return $new_string; } //funzione esplodi a due punti

function comma_expl ($string) { $new_string = explode (',', $string); return $new_string; } //funzione esplodi a virgola

                            /*============ FUNZIONE ESPLODI VALUE ===============*/

//value_expl ritorna un array di 3 elementi: 0 => giorno, 1 => apertura, 2 => chiusura
function value_expl ($string) {
    $risultato = array ();
    $array_string = colon_expl($string);

    $day = null;
    if (is_date ($array_string[0])) { // se day e' nella forma di date lo converte in giorni
        $day = name_day ($array_string[0]);
    }
    else { $day = $array_string[0]; } 

    $hours = $array_string[1];
    $hours = dash_expl($hours);

    $apertura = trim($hours[0]);
    $chiusura = trim($hours[1]);

    array_push ($risultato, $day, $apertura, $chiusura); //carica sul array risultato i 3 risult

    return $risultato;
}
                            /*============ FUNZIONE ESPLODI KEY ==============*/

//funzione simile a quella sopra ma nata per esplodere dati della la key
function key_expl ($string) { 
    $risultato = array();

    $new_array_string = colon_expl($string); //esplosione per spazio
    $days = $new_array_string[0];   // i giorni sono contenuti nel primo elemento
    $hours = $new_array_string[1];
    array_push ($risultato, $days);
    $hours = comma_expl($hours);  //esplosione per virgola perche' sono 2 o piu orari separati da virgola mattina e pomeriggio

/*--------DIVISIONE PERIODO----------*/
    foreach ($hours as $ora) {
        $orario = array ();

        $periodo_orario = trim($ora);    
        $periodo_orario = dash_expl($periodo_orario); //esplosione del orario mattiniero

        $apertura_periodo = $periodo_orario[0]; //questo si poteva anche evitare ma meglio assicurarsi che non ci
        $chiusura_periodo = $periodo_orario[1]; //due punti che possano disturbare... 

        array_push ($orario, $apertura_periodo, $chiusura_periodo);
        array_push ($risultato,$orario);
    }
    return $risultato;
}

                    /*============= FUNZIONE AGGIUSTA/CORREGGI FORMA ===========*/
//il nome dice tutto mette aposto il dato da tutte le imperfezioni come spazzi digitati per sbaglio e poi fa il trim del dato cioe' lo rend in minuscolo

function aggiusta ($dato) {
    $new_dato = $dato;
    $new_dato = trim($new_dato);
    $new_dato = strtolower($new_dato);
    return $new_dato;
}

                        /*============= FUNZIONE DI SELEZIONE INTERVALLO GIUSTO ===========*/

function name_day ($date) { // funzione che preso un yyyy-mm-dd ricava il giorno a 3 lettere tipo mon , tue 
    $giorni = array('sun','mon','tue','wed','thu','fri','sat');
    return $giorni[date('w',strtotime($date))]; 
}

function is_date ($date) { //dato una stringa controlla se la stringa e' una data yyyy-mm-gg
    $pattern = '((19|20)\d\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01]))';
    if (preg_match($pattern,$date) > 0) { return true; }
    else { return false;}
}

function is_hour ($hour) { //dato una stringa contenente ora, controlla se e' ben formata  hour < 24, min < 60
   if ($hour == 2400) { return true;}
    $pattern = '(([01][0-9]|2[0-3])[0-5][0-9])';
    if (preg_match($pattern,$hour) > 0) { return true; }
    else { return false;}
}

function fondi_day ($array) { //funzione nata per normal_day che fonde l'array di day 
    $day_string = null;
    foreach ($array as $key=>$value) {
            $day_string=$day_string.$value;
            if($key!=count($array)-1) {
              $day_string=$day_string.','.' ';
              }
            else { $day_string = $day_string.':'; }
    }
    return $day_string;
}

                        /*============ NORMALIZZA I GIORNI SCRITTI IN NOTAZIONE STANDARD =============*/
function normal_day ($string) {//trasforma il giorno da yyyy-mm-gg in day
    $days = array ();
    $hours = array ();
    $risultato = array ();

    $exploded = colon_expl ($string); //funzione explode per :
    $frammento = $exploded[0];

    @$hours = $exploded[1]; //BUG da correggere...

    $frammento = comma_expl ($frammento); //funzione explode per , 

    for ($i = 0, $n = count($frammento); $i < $n; $i++) {
        $fram = trim($frammento[$i]);
        if (is_date ($fram)) { //funzione controlla tramite pattern se e' una data
            $day = name_day ($fram); //funzione trova nome giorno della data
            array_push ($days, $day);
    }

        else { array_push ($days, $frammento[$i]); }
    }
    $days = fondi_day ($days); //fonde gli elementi di un array
    $risultato = $days.$hours;
    return $risultato;
}
                            /*============= FUNZIONE FILTRA ORARIO GIUSTO =============*/
//funzione che dato un opening e un giorno crea un array dove e' contenuto l' orario del giorno cercato.
function seleziona ($orari, $day) {
    $risultato = array();
    $array_stringa = dot_expl($orari); //questo array contiene gli orari contenuti nella key
    for ($i = 0, $n = count($array_stringa); $i < $n; $i++) {
        $prova = normal_day ($array_stringa[$i]); 
        if (stristr($prova, $day) != false) { // se il day esiste sul elementi del array allora viene chiamata key_expl su di esso
            $risult_prov = key_expl ($prova);
            $risultato = $risult_prov;
        }
    }
    if (empty ($risultato)) { return $risultato = 0;}
    return $risultato;
}


                            /*============== FUNZIONE CALCOLA ORARI ================*/
//funzione che dato un orario iniziale un orario finale e un array di orari fa il confronto e restituisce un numero a seconda degli orari               
function calcola ($inizio, $fine, $new_orario1){

    $risultato = 0;
    $risult_prov = 0;
    
    $i = 1; $n = count ($new_orario1); //preparazione per il contatore

    for ( $i; $i < $n; $i++) {
        
        $apertura = null;
        $chiusura = null;

        if (is_hour ($new_orario1[$i][0])) { $apertura = $new_orario1[$i][0]; }  //controlla se l'ora e' ben formata
        else {sendHTTPResponse ($http_errors[406], "error: orario apertura di orario1 non corretto, non è un orario");}

        if (is_hour ($new_orario1[$i][1])) { $chiusura = $new_orario1[$i][1]; }  //controlla se l'ora e' ben formata
        else {sendHTTPResponse ($http_errors[406], "error: orario chiusura di orario1 non corretto, non è un orario'");}
        
        if ($apertura > $chiusura) { $chiusura = $chiusura + 2400; } // se l'apertura e' maggiore della chiusura allora aggiunge +24 ore alla $chiusura
        if ($inizio > $fine) { $fine = $fine + 2400; } // se l'inizio e' maggiore della fine allora aggiunge +24 ore al $fine.
                    
        if ($risultato == 0) { // se il risultato e' zero  controlla anche nei altri orari
    
           if ($inizio <= $apertura) {
              if ($fine < $apertura) { $risultato = 0; } /* CHIUSO */
                 elseif ($fine < $chiusura) {  $risultato = 1; } /* APRIRA */
                 else { $risultato = 4; } /* CHIUDERA confrontare con il secondo orario se e' presente */
           }
           elseif ($inizio >= $apertura) {
               if ($inizio > $chiusura) { $risultato = 0;} /* CHIUSO */
                   elseif ($fine <= $chiusura) { $risultato = 2; } /* APERTO */
                   else { $risult_prov = 3; } /* CHIUDERA confrontare con il secondo orario se e' presente */
           }
       }
    }

    if (($risult_prov == 3) && ($risultato == 1)) { $risultato = 4; } // questo if restituisce 4 perche trova un aprira al primo cilo e chiudera al secondo ciclo 
    elseif ($risult_prov != 0) { $risultato = $risult_prov; } // nel caso in cui risutlprov non e' zero assegna il suo valore a risultato

    return $risultato; 
}



?>
