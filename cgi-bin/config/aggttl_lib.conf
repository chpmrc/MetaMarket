<?php    
require_once("http.conf");
/*****
questo file contiene tutte le funzioni che ho creato per l'aggregatore turtle. il file e' da includere nel aggttl.php con include_once();  
*****/
/*%%%%%% CREATORE MICHEL GOITOM TUCCU %%%%%%%%*/
                    /*========= array di @prefix da aggiungere al file finale =========*/
$namespace = array(
  'dcterms' => 'http://purl.org/dc/terms/',
  'xsd' => 'http://www.w3.org/2001/XMLSchema#',
  'vcard' => 'http://www.w3.org/2006/vcard/ns#',
  'cs' => 'http://cs.unibo.it/ontology/',
  '' => 'http://www.essepuntato.it/resource/ ' );


                    /*============ FUNZIONE SELEZIONA URI A SECONDA DEL KEY ============*/
/*questa funzione a seconda della tipologina restituisce un link tra cs e vcard e dcterms*/
function seleziona_uri ($tipo) {
    $cs = array ("opening", "closing");
    $vcard = array ("category", "fn","extended-address", "latitude", "longitude", "tel", "fax");
    $dcterms = array ("creator", "created", "description", "valid", "source");

    if ($tipo == null) {return null;}
    elseif (in_array ($tipo, $vcard)) { return "http://www.w3.org/2006/vcard/ns#"; }
    elseif (in_array ($tipo, $cs)) { return "http://cs.unibo.it/ontology/"; }
    elseif (in_array ($tipo, $dcterms)) { return "http://purl.org/dc/terms/"; }
    elseif ($tipo == 'id') {return 'http://www.essepuntato.it/resource/' ;}
    elseif ($tipo == null) { return null;}
    else {return sendHTTPResponse ($http_errors[406],  "errore \"$tipo\": la key data non ha un prefix nel file");}
}

 
                    /*============ FUNZIONE CHE A SECONDA DEL COMP RESTITUISCE UNA COMPARAZIONE =============*/
// funzione che a seconda del valore di comp restituisce un confronto tra key e value

function compara($key, $comp, $value) {
    switch ($comp) {
        case 'eq': { return $key == $value; }break;
        case 'ne': { return $key != $value; }break;
        case 'lt': { return $key < $value; }break;
        case 'gt': { return $key > $value; }break;
        case 'ge': { return $key >= $value; }break;
        case 'le': { return $key <= $value; }break;
        case 'contains': {return stristr ($key, $value);}break;
        case 'ncontains': {return !(stristr  ($key, $value));}break;
        case null: { return null;}
        default: { return sendHTTPResponse ($http_errors[406], "Warning!! la comp data non esiste"); } //da mettere aposto con l'error appropriato
    }
}


                     /*========== FUNZIONE AGGIUSTA/CORREGGI FORMA KEY ============*/
//il nome dice tutto mette aposto il campo key da tutte le imperfezioni e modifica il nome per permettere di trovarlo nel file turtle

function aggiusta_key ($key) {
    $key = trim($key);
    $key = strtolower($key);
    $new_key = null;
    switch($key) {
        case 'id': { return $new_key = 'id'; }break;
        case 'name': { return $new_key ='fn'; }break;
        case 'lat': { return $new_key = 'latitude'; }break;
        case 'long': { return $new_key = 'longitude'; }break;
        case 'address': { return $new_key = 'extended-address'; }break;
        case 'category': { return $new_key = 'category'; }break;
        case 'opening': { return $new_key = 'opening'; }break;
        case 'closing': { return $new_key = 'closing'; }break;
        case null: {return $new_key = null; }break;
        default: { return sendHTTPResponse ($http_errors[406], "Warning!! la key data non è corretta"); } //da mettere aposto con l'error appropriato
    }
    return $new_key;
}


                    /*============= FUNZIONE AGGIUSTA/CORREGGI FORMA ===========*/
//il nome dice tutto mette aposto il dato da tutte le imperfezioni come spazzi digitati per sbaglio e poi fa il trim del dato cioe' lo rend in minuscolo

function aggiusta ($dato) {
    $new_dato = $dato;
    $new_dato = trim($new_dato);
    $new_dato = strtolower($new_dato);
    return $new_dato;
}


                    /*============= FUNZIONE CONTROLLA ERRORE SEMANTICO RICHIESTA =============*/
//funzione che dato una key e un comp controlla se e' ammesso il comp a quella key

function controllo ($key, $comp) {
    $possibili_comp = array ('id' => array ('eq','ne','contains'),
                             'fn' => array ('eq','ne','contains','ncontains'),
                             'latitude' => array ('eq', 'ne', 'ge','le','lt','gt'),
                             'longitude' => array ('eq', 'ne', 'ge','le','lt','gt'),
                             'extended-address' => array ('contains'),
                             'category' => array ('eq', 'ne','contains', 'ncontains'),
                             'opening' => array ('contains', 'ncontains'), 
                             'closing' => array ('contains', 'ncontains'));

        switch ($key) {
            case 'id': {return appartiene ($key, $comp, $possibili_comp); }break;
            case 'fn': {return appartiene ($key, $comp, $possibili_comp); }break;
            case 'latitude': {return appartiene ($key, $comp, $possibili_comp); }break;
            case 'longitude': {return appartiene ($key, $comp, $possibili_comp); }break;
            case 'extended-address': {return appartiene ($key, $comp, $possibili_comp); }break;
            case 'category': {return appartiene ($key, $comp, $possibili_comp); }break;
            case 'opening': {return appartiene ($key, $comp, $possibili_comp); }break;
            case 'opening': {return appartiene ($key, $comp, $possibili_comp); }break;
            case null: {return null;}break;
    }
}

function appartiene ($key, $comp, $array) {
    if (in_array ($comp ,$array[$key])) {return true;}
    else {return false;}    
}


                        /*============ FUNZIONE PRELEVA ID DA URI ==========='*/

function expl_slash ($string) { //esplodi per slash
    $new_string = $string;
    $new_string = explode ('/',$new_string);
    return $new_string;
}

function subject ($soggetto) { //trova soggetto ptxxx
    $subject = expl_slash ($soggetto);
    $subject = $subject [count ($subject)-1];
    return $subject;
}


                         /*============ FUNZIONE MAIN APPLICA COMP A KEY E VALUE ==============*/


function main ($triples, $array_sogg, $propriety, $new_key, $new_comp, $new_value, $risultato) {

    if (($new_value == null ) && ($new_key == null) && ($new_comp == null))  { $risultato =array_merge ($risultato,$triples); }  //se i 3 campi sono vuoti
    
    elseif (controllo ($new_key, $new_comp) != false) { //controlla se la comp e' ammessa per la key data
         foreach ($array_sogg as $soggetto) { //dal array deo soggetti preleva il primo elemento

            foreach ($triples as $tripla) { //dal array principale [triples] preleva la prima tripla

                switch ($new_key) { //switch nato per controllare se la key e' id

                    case 'id': { $sogg = subject ($soggetto);

                               if (compara ($sogg , $new_comp, $new_value)) {
                                  foreach ($triples as $trip) {   //per ogni tripla, se il soggetto e' uguale lo carica al risultato finale
                                       if ($soggetto == $trip['s']) {
                                          array_push ($risultato, $trip);
                                       }
                                  } 
                               }
                    }break;

                    default: { if (($tripla['s'] == $soggetto) && ($tripla['p'] == $propriety)) { //se e' vera allora inizia a confrontare

                             $oggetto = strtolower ($tripla['o']); // mette in minuscolo e assegna a una nuova variabile
                                 if (compara ($oggetto, $new_comp, $new_value) != false) { // se la comparazione va a buon fine lavora
                                    foreach ($triples as $trip) {   //per ogni tripla, se il soggetto e' uguale lo carica al risultato finale
                                         if ($soggetto == $trip['s']) {
                                            array_push ($risultato, $trip);
                                         }
                                    }
                                 }
                               }
                    }
                }
            }
        }
    }

    else {return sendHTTPResponse ($http_errors[406],"alla key data non si puo applicare comp" );}   //"errore semantico: alla key data non si puo applicare $comp"
    if (empty ($risultato)) { return sendHTTPResponse($http_errors[404],"il risultato non contiene nulla, non è stato trovato nulla che corrisponda ala richiesta");} 
    else { return $risultato; } /*RISULTATO FINALE*/
}




?>
